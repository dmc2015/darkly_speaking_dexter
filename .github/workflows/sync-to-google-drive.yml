name: Sync Files with Google Drive

on:
  push:
    branches:
      - gpt-2  # Adjust to your desired branch

jobs:
  sync_to_drive:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Set up Google Cloud authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_KEY }}

    - name: Set up Go environment
      uses: actions/setup-go@v3
      with:
        go-version: '1.19'  # Adjust to your Go version

    - name: Install dependencies
      run: |
        go mod tidy
        go mod vendor

    - name: Create Go script to upload files
      run: |
        # Create the Go script to sync files to Google Drive
        echo '
        package main

        import (
            "context"
            "fmt"
            "log"
            "os"
            "path/filepath"

            "google.golang.org/api/drive/v3"
            "google.golang.org/api/googleapi"
            "golang.org/x/oauth2/google"
        )

        func uploadFile(srv *drive.Service, filePath string, folderId string) (*drive.File, error) {
            file, err := os.Open(filePath)
            if err != nil {
                return nil, err
            }
            defer file.Close()

            fileName := filepath.Base(filePath)
            fileMetadata := &drive.File{
                Name:    fileName,
                Parents: []string{folderId},
            }

            fileRes, err := srv.Files.Create(fileMetadata).
                Media(file).
                Fields("id, name").
                Do()
            if err != nil {
                return nil, err
            }
            return fileRes, nil
        }

        func main() {
            ctx := context.Background()

            // Create the Drive service
            b, err := os.ReadFile("data/darklyspeakingdexter-c637f22f8d1c.json")
            if err != nil {
                log.Fatalf("Unable to read service account credentials file: %v", err)
            }

            config, err := google.JWTConfigFromJSON(b, drive.DriveFileScope)
            if err != nil {
                log.Fatalf("Unable to parse service account credentials: %v", err)
            }

            srv, err := drive.New(config.Client(ctx))
            if err != nil {
                log.Fatalf("Unable to retrieve Drive client: %v", err)
            }

            folderId := os.Getenv("GDRIVE_FOLDER_ID")
            if folderId == "" {
                log.Fatalf("No folder ID found in environment variables")
            }

            // Specify the file to upload
            filePath := "data/my_file.txt"  // Modify as needed
            uploadedFile, err := uploadFile(srv, filePath, folderId)
            if err != nil {
                log.Fatalf("Unable to upload file: %v", err)
            }

            fmt.Printf("File uploaded successfully: %s (ID: %s)\n", uploadedFile.Name, uploadedFile.Id)
        }
        ' > sync_files.go

    - name: Run the Go script to upload files
      run: |
        go run sync_files.go

    - name: Clean up
      run: |
        # Clean up any temporary files if needed
        rm sync_files.go
