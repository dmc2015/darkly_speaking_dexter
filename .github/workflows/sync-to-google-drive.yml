name: Sync Files with Google Drive

on:
  push:
    branches:
      - gpt-2  # Adjust to your desired branch

jobs:
  sync_to_drive:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Set up Python environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Adjust to your Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

    - name: Create Python script to upload files
      run: |
        # Create the Python script to sync files to Google Drive
        echo '
        import os
        import io
        from google.oauth2.service_account import Credentials
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload

        # Upload file function
        def upload_file(service, file_path, folder_id):
            file_name = os.path.basename(file_path)
            file_metadata = {
                "name": file_name,
                "parents": [folder_id]
            }
            media = MediaFileUpload(file_path, resumable=True)
            request = service.files().create(
                media_body=media,
                body=file_metadata
            )
            response = request.execute()
            return response

        def main():
            # Load service account credentials
            creds = Credentials.from_service_account_file(
                "data/darklyspeakingdexter-c637f22f8d1c.json",
                scopes=["https://www.googleapis.com/auth/drive"]
            )

            # Build the Drive API client
            service = build("drive", "v3", credentials=creds)

            folder_id = os.getenv("GDRIVE_FOLDER_ID")
            if not folder_id:
                raise ValueError("No folder ID found in environment variables")

            # Specify the file to upload
            file_path = "data/my_file.txt"  # Modify as needed
            uploaded_file = upload_file(service, file_path, folder_id)

            print(f"File uploaded successfully: {uploaded_file['name']} (ID: {uploaded_file['id']})")

        if __name__ == "__main__":
            main()
        ' > sync_files.py

    - name: Run the Python script to upload files
      run: |
        python sync_files.py

    - name: Clean up
      run: |
        # Clean up any temporary files if needed
        rm sync_files.py
